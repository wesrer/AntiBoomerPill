1. On line 64, we pass the message "label already bound". The code reports
the error that a label is being defined that has already been defined.
An analagous error is redefining a function.

2. check: line 1
    expect: line 5
    conditional goto: 21
    get and set global: line 13 and 14
    register move: not in previous module
    error: line 42
    load-literal: line 1
    halt: line 45

3. L4 :
   <|> def_label <$> name <~> the ":"

4. line 1-3
    The parser is supposed to parse the signature
    $r0 := function 0 { with loadfunStart
    and then the many instruction combinator is 
    supposed to get instructions terminated with
    a newline. there are 0 or more instructions.
    After all instructions are parsed, the closing bracket
    is read.

5. Initially, our parser for setglobal/getglobal
did not work. We had to define an eR1U16_switch 
instruction builder to take a literal and then a register.
Line 13 in our allsyntax.vs exposed this fault. Our efforts
were successful.

6. Line 21 in instructions.c

7. The examples can be found from line 24-44.

8. I would say that they do constitute an embedding/projection pair.
    The embedding is the 

    unparse is the embedding function because it takees object code
    in the world of internal VM ObjectCode struct to lines of assembly
    code that would be in a .vs file.
    parse is the projection function because source code is
    being projected into assembly code instructions.

9.
(p1 <|> p2) ts == SOME(OK a, ts'), when p1 ts succeeds
(p1 <|> p2) ts == SOME(OK a, ts'), when p1 fails and p2 succeeds
(p1 <|> p2) ts == SOME(ERROR msg, ts'), when p1 errors
(p1 <|> p2) ts == NONE, when both fail


10. commaSep p = cons <$> p <~> the "," <*> (fn xs => commaSep p xs) <|> succeed []

val commaSep : 'a producer -> 'a list producer

cons : 'a * 'a list -> 'a list
p: 'a producer