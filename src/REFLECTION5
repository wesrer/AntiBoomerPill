1. 
(let ([x 5]) x(x))

2. 
let t1 = n in
let t2 = n + 1 in
    t2

3. (let ([x n]) n + 1)


4. 
In the ML representation of knormal form:
Type 'a --> formal parameter, local variable
Type vmop -->  primitive function
Type literal --> global variable, user-defined function

5. Since anything converted to knormal form can then be translated to assembly
and then object code, it would be useful to convert Erlang to knormal form.
 knormal form may have to be extended to include PIDs. They would probably need to be
represented similarly as a global variable is, perhaps using a literal index into
the globals to retrieve the PID.

6. a) This would allow for more extensibility since the user would be able to represent many scheme expressions using knormal form. Once we have knormal form, we can add more and more features to the set of expressions we can compile until we are compiling full vscheme.
    b) In knf, all names are local. References to globals use primitive operations such as getglobal and setglobal,
    and they use literals. Therefore, literals in knormal form are embedded into vscheme as names of variables or literal values. 

7. (lambda (xs) => cdr xs)

8. No, since all free variables in a funcode must be global variables

10. I used functions from the error module for projectkn.sml and uft.sml.
    One example is: line 58 from projectkn.sml

11. When I ran my good.scm, I learned my pass works for all every form in good.scm, but I had to update
my good.scm because many syntactic forms were wrong. My bad.scm expressions were correctly detected
but all of my errors looked the same so I may change this to get more helpful error messages.

12. A[[goto l]] k p = goto p(l) - k