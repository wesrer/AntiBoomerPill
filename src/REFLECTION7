1. Line 183 in vmrun.c:
        vm->window += funreg;
2. Line 195: 
        regs[a.dest_reg - a.start_window] = regs[uX(i)];
4. overtail.vs contains a tail call implementation of factorial. The difference
is it tries to take the factorial of a number bigger than the stack size, which results
in a stack overflow without using a tailcall in overstack.vs. The number is still
too big to fit in an int though, so it prints as 'inf'.
5.  the nregs member must accurately represent the highest register the function 
    uses so as to avoid overwriting the number of registers it is allowed
    to use in its window.
6. This invariant is exploited in vmrun.c when we check that the function
does not use more than 255 registers. Although there are technically more registers available,
these are for other functions using a different window.
7. Having the abstraction that each function can only use 256 registers even when
there are technically more provides a performance benefit because we avoid having
to write this data to "memory" and do some sort of register allocation procedure where
we determine which values can live in the registers.
The cost of using register windows is that we don't have a procedure for what to do if the user 
is able to call a function since there is stack space but the register window
can no longer be shifted upwards.
