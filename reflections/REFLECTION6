2. One example is line 50 of codegen.sml. I use the function
composition operator but would have used the @ operator if we were
using standard list operators.

3. The two classes of primitives are those that set a register and those that have an effect.
This is important because primitves that set a register must produce a value that can be stored
in a register. Likewise, if a side effect occurs in an effectual context, it is discarded.

4. Both knormal form and assembly code refer to values by their location in a register,
but scheme source code does not, since each value is referred to by its variable name.
In knormal found, each binding corresponds to a VM instruction.

5. The precondition is that the expression being translated has two of three destinies, one where the 
expression is destined to be put in a register. The other is that an expression is being evaluated
for its side effect.

6.
A) With this new representation, it becomes harder to deal with control flow, since
labels represent instruction locations.
 B)   It would be easier to deal with the concept of labels, since we would not have to 
    perform the label elimination pass.
C) There would be no need to have the operator in object code since all the instruction
forms would be finite and we could code them in directly instead of having an 
abstraction for all of the different types of instructions.


8. I added idiv and zero to the binary ops.
I added hash to the unary ops.
I added the following primitives that set registers:
plus
subtract
divide
multiply
not 
makeconscell
projectbool 
function_observer
boolean_observer
pair_observer
symbol_observer
number_observer
mov 
hash

9. 
1.
    A) knf would have to change since a global variable
    value could not be changed, and so would
    the assembly code and the object code.
    B) I think the knf translation is best suited because
    C) this is where a primitive could be called
    that sets a constant based on a name.
2. 
    A) knf would have to be extended 
    B) knf would be best suited for this
    C) there would have to be a syntactic form that does this.

3. 
    A) knf and assembly code.
    B) asm
    C) We would have to change knf to include the label to jump to if there
    was a break or continue. Then, in the while loop case in 
    codegen, we would generate labels accordingly if there was an 
    expression for break or continue.
