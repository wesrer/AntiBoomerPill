1. LINE 48- in toReg', e1 and e2 are never in tailposition, since toReg' is
not called for the last subexpression in anything in the return function,
which is used to produce instructions that store return values in registers.
    LINE 73- in forEffect', e1 and e2 are never in tail position because
    forEffect does not store a value in a destination register and cannot
    be used as the value returned from a function.
    LINE 99- both are, since both e1 and e2 are part of the if expression
    and therefore both can be returned from a function.
    
2. We chose the first parameter register, since we know that it 
would be killed by the function.
In the case that the function accepts no parameters, 
we used the register the function was stored in. However, looking back, we should have
used the function register for both cases.
3. We chose to evaluate the primitive for effect and leave the register unset. We chose this 
because it was the easiest to implement, honestly. We wanted to replace the primitive with a call
to error, but we couldn't quite get it working. Although this choice does have merits-
it is more flexible for the language definition to exhibit this behavior
rather than replace the primitive with a call to error.
4. We had to add the funcode case for toReg'. I also had to fix a bug I had in toReg'
in the assign case that matched incorrectly on the expression.
5. I think the third alternative is the best because it provides more of a sense of continuity.
I think it would make more sense for us to be able to run assembly language with call instructions, and
to do the code generation all at once and have a more linear picture.
6. I learned that it makes the most sense to start by thinking about the grammar
because that can help to think concretely in terms of what expression we
will have to support.

hello!


